# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zx_vAOuhnoYlNpO6aUxipIly9WFEBmQG
"""

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns

df=pd.read_csv("/content/adult.csv",names=['age',"workclass","fnlwgt","education","education-num","marital-status","occupation","relationship","race","sex","capital-gain","capital-loss","hours-per-week","native-country","class"])

df.head(2)

df.tail(2)

df.info()

df.describe()

df.shape

"""To find the null values"""

df.isnull().sum()

"""#Conclusion
1. The size of data is 32561 rows and 15 column
2.Their are no null value present in any of the columns.
3.Their are 6 numerical data and 9 non numerical
"""

numerical_column=list()
categorical_column=list()

for i in df.columns:
  if(df[i].dtype=='object'):
    categorical_column.append(i)
  else:
    numerical_column.append(i)

#mean of every numerical column
for i in numerical_column:
  print(round(np.mean(df[i]),2))

"""#Duplicate rows"""

df[df.duplicated()]

"""#Count of duplicate rows"""

len(df[df.duplicated()])

"""#Avg age of people involved in datset"""

round(np.mean(df['age']))

"""#People belonging to which workclass"""

df['workclass'].value_counts()

"""#Education qualication of people"""

df['education'].value_counts()

"""#Avg number of hours working in a week

"""

round(np.mean(df['hours-per-week']))

"""#People belonging to which country?"""

df['native-country'].value_counts()

"""#Changing value of '<=50K' to 'A' and '>50K' to 'B' to make analysis easier using map function

"""

df['class']=df['class'].map({" <=50K":"A"," >50K":"B"})

"""#Number of male and female in dataset"""

df['sex'].value_counts()

"""#Does age plays an important role in deciding the class of people?"""

df.groupby('class').mean()['age'].reset_index()

#graphical reprsentation 
clas=df.groupby('class').mean()['age'].reset_index()['class']
age=df.groupby('class').mean()['age'].reset_index()['age']
px.bar(x=clas,y=age,labels={'x': 'class', 'y':'Average Age'})

"""#Handle '?' in column WORKING CLASS"""

df['workclass'].unique()

df_class=df[df['workclass']==' ?']
len(df_class)

"""Since 1800+ rows have '?' in them it is not feasible to drop all 1800 columns , instead we will be replacing it will 'Unkonwn' value"""

def replace_question_mark(a):
  if(a==' ?'):
    return 'unknown'
  return a

df['workclass']=df['workclass'].apply(replace_question_mark)

"""#Which working class people mostly belong to class A"""

df3=df.groupby(['workclass','class']).count().reset_index()

df3=df3[df3['class']=='A']
df3[['workclass','class','occupation']].sort_values(by='occupation')[::-1]

clas=df3['occupation']
workclass=df3['workclass']
px.bar(x=workclass,y=clas,labels={'x':"workclass",'y':'count of people in A class'})

"""#which workclass people are the most hard working (max number of working hours)"""

df.groupby('workclass').mean()['hours-per-week'].reset_index()

workclass=df.groupby('workclass').mean()['hours-per-week'].reset_index()['workclass']
work=df.groupby('workclass').mean()['hours-per-week'].reset_index()['hours-per-week']

px.histogram(x=workclass,y=work,labels={'x':"workclass",'y':"avg number of hours"})

"""#Does capital gain of people depend on race of people"""

df.groupby('race').mean()['capital-gain'].reset_index()

px.scatter(x=df.groupby('race').mean()['capital-gain'].reset_index()['race'],y=df.groupby('race').mean()['capital-gain'].reset_index()['capital-gain'])

"""#Handling '?' value in   native country"""

def replace_mark(a):
  if(a==' ?'):
    return np.nan
  return a

df['native-country']=df['native-country'].apply(replace_mark)

"""#people living in which country and which working class sufers highest capital loss"""

df.groupby(['native-country','workclass']).sum().reset_index()[['native-country','workclass','capital-loss']].sort_values(by='capital-loss')[::-1]



"""#What is the percentage of white people in the data"""

df['race'].value_counts(normalize=True)*100

px.pie(df['race'],names='race')

